import Swift  // 3.0.1
%{
    types = [
        "AnyBidirectionalCollection",
        "AnyCollection",
        "AnyHashable",
        "AnyIndex",
        "AnyIterator",
        "AnyRandomAccessCollection",
        "AnySequence",
        "Array",
        "ArraySlice",
        "AutoreleasingUnsafeMutablePointer",
        "BidirectionalSlice",
        "Bool",
        "CVaListPointer",
        "Character",
        "ClosedRange",
        "ClosedRangeIndex",
        "ClosedRangeIterator",
        "CollectionOfOne",
        "ContiguousArray",
        "CountableClosedRange",
        "CountableRange",
        "DefaultBidirectionalIndices",
        "DefaultIndices",
        "DefaultRandomAccessIndices",
        "Dictionary",
        "DictionaryIndex",
        "DictionaryIterator",
        "DictionaryLiteral",
        "Double",
        "EmptyCollection",
        "EmptyIterator",
        "EnumeratedIterator",
        "EnumeratedSequence",
        "FlattenBidirectionalCollection",
        "FlattenBidirectionalCollectionIndex",
        "FlattenCollection",
        "FlattenCollectionIndex",
        "FlattenIterator",
        "FlattenSequence",
        "Float",
        "Float80",
        "IndexingIterator",
        "Int",
        "Int16",
        "Int32",
        "Int64",
        "Int8",
        "IteratorOverOne",
        "IteratorSequence",
        "JoinedIterator",
        "JoinedSequence",
        "LazyBidirectionalCollection",
        "LazyCollection",
        "LazyFilterBidirectionalCollection",
        "LazyFilterCollection",
        "LazyFilterIndex",
        "LazyFilterIterator",
        "LazyFilterSequence",
        "LazyMapBidirectionalCollection",
        "LazyMapCollection",
        "LazyMapIterator",
        "LazyMapRandomAccessCollection",
        "LazyMapSequence",
        "LazyRandomAccessCollection",
        "LazySequence",
        "ManagedBufferPointer",
        "Mirror",
        "MutableBidirectionalSlice",
        "MutableRandomAccessSlice",
        "MutableRangeReplaceableBidirectionalSlice",
        "MutableRangeReplaceableRandomAccessSlice",
        "MutableRangeReplaceableSlice",
        "MutableSlice",
        "ObjectIdentifier",
        "OpaquePointer",
        "RandomAccessSlice",
        "Range",
        "RangeReplaceableBidirectionalSlice",
        "RangeReplaceableRandomAccessSlice",
        "RangeReplaceableSlice",
        "Repeated",
        "ReversedCollection",
        "ReversedIndex",
        "ReversedRandomAccessCollection",
        "ReversedRandomAccessIndex",
        "Set",
        "SetIndex",
        "SetIterator",
        "Slice",
        "StaticString",
        "StrideThrough",
        "StrideThroughIterator",
        "StrideTo",
        "StrideToIterator",
        "String",
        "String.CharacterView",
        "String.CharacterView.Index",
        "String.UTF16View",
        "String.UTF16View.Index",
        "String.UTF16View.Indices",
        "String.UTF8View",
        "String.UTF8View.Index",
        "String.UnicodeScalarView",
        "String.UnicodeScalarView.Index",
        "String.UnicodeScalarView.Iterator",
        "UInt",
        "UInt16",
        "UInt32",
        "UInt64",
        "UInt8",
        "UTF16",
        "UTF32",
        "UTF8",
        "UnfoldSequence",
        "UnicodeScalar",
        "Unmanaged",
        "UnsafeBufferPointer",
        "UnsafeBufferPointerIterator",
        "UnsafeMutableBufferPointer",
        "UnsafeMutablePointer",
        "UnsafeMutableRawBufferPointer",
        "UnsafeMutableRawBufferPointer.Iterator",
        "UnsafeMutableRawPointer",
        "UnsafePointer",
        "UnsafeRawBufferPointer",
        "UnsafeRawBufferPointer.Iterator",
        "UnsafeRawPointer",
        "Zip2Iterator",
        "Zip2Sequence",
    ]
}%
% for type in types:

extension ${type} {

    public init?(_ a: AAA) {
        guard let o = a[] as? ${type} else {
            return nil
        }
        self = o
    }
}
% end
