import Swift // 3.0.2
%{
    types = {
        "AnyBidirectionalCollection": {},
        "AnyCollection": {},
        "AnyHashable": {},
        "AnyIndex": {},
        "AnyIterator": {},
        "AnyRandomAccessCollection": {},
        "AnySequence": {},
        "Array": {},
        "ArraySlice": {},
        "AutoreleasingUnsafeMutablePointer": {
            "unsupported": {
                "os": ["Linux"],
            },
        },
        "BidirectionalSlice": {},
        "Bool": {},
        "CVaListPointer": {},
        "Character": {},
        "ClosedRange": {},
        "ClosedRangeIndex": {},
        "ClosedRangeIterator": {},
        "CollectionOfOne": {},
        "ContiguousArray": {},
        "CountableClosedRange": {},
        "CountableRange": {},
        "DefaultBidirectionalIndices": {},
        "DefaultIndices": {},
        "DefaultRandomAccessIndices": {},
        "Dictionary": {},
        "DictionaryIndex": {},
        "DictionaryIterator": {},
        "DictionaryLiteral": {},
        "Double": {},
        "EmptyCollection": {},
        "EmptyIterator": {},
        "EnumeratedIterator": {},
        "EnumeratedSequence": {},
        "FlattenBidirectionalCollection": {},
        "FlattenBidirectionalCollectionIndex": {},
        "FlattenCollection": {},
        "FlattenCollectionIndex": {},
        "FlattenIterator": {},
        "FlattenSequence": {},
        "Float": {},
        "Float80": {
            "supported": {
                "arch": ["i386", "x86_64"],
            },
            "unsupported": {
                "os": ["Windows"],
            },
        },
        "IndexingIterator": {},
        "Int": {},
        "Int16": {},
        "Int32": {},
        "Int64": {},
        "Int8": {},
        "IteratorOverOne": {},
        "IteratorSequence": {},
        "JoinedIterator": {},
        "JoinedSequence": {},
        "LazyBidirectionalCollection": {},
        "LazyCollection": {},
        "LazyFilterBidirectionalCollection": {},
        "LazyFilterCollection": {},
        "LazyFilterIndex": {},
        "LazyFilterIterator": {},
        "LazyFilterSequence": {},
        "LazyMapBidirectionalCollection": {},
        "LazyMapCollection": {},
        "LazyMapIterator": {},
        "LazyMapRandomAccessCollection": {},
        "LazyMapSequence": {},
        "LazyRandomAccessCollection": {},
        "LazySequence": {},
        "ManagedBufferPointer": {},
        "Mirror": {},
        "MutableBidirectionalSlice": {},
        "MutableRandomAccessSlice": {},
        "MutableRangeReplaceableBidirectionalSlice": {},
        "MutableRangeReplaceableRandomAccessSlice": {},
        "MutableRangeReplaceableSlice": {},
        "MutableSlice": {},
        "ObjectIdentifier": {},
        "OpaquePointer": {},
        "RandomAccessSlice": {},
        "Range": {},
        "RangeReplaceableBidirectionalSlice": {},
        "RangeReplaceableRandomAccessSlice": {},
        "RangeReplaceableSlice": {},
        "Repeated": {},
        "ReversedCollection": {},
        "ReversedIndex": {},
        "ReversedRandomAccessCollection": {},
        "ReversedRandomAccessIndex": {},
        "Set": {},
        "SetIndex": {},
        "SetIterator": {},
        "Slice": {},
        "StaticString": {},
        "StrideThrough": {},
        "StrideThroughIterator": {},
        "StrideTo": {},
        "StrideToIterator": {},
        "String": {},
        "String.CharacterView": {},
        "String.CharacterView.Index": {},
        "String.UTF16View": {},
        "String.UTF16View.Index": {},
        "String.UTF16View.Indices": {},
        "String.UTF8View": {},
        "String.UTF8View.Index": {},
        "String.UnicodeScalarView": {},
        "String.UnicodeScalarView.Index": {},
        "String.UnicodeScalarView.Iterator": {},
        "UInt": {},
        "UInt16": {},
        "UInt32": {},
        "UInt64": {},
        "UInt8": {},
        "UTF16": {},
        "UTF32": {},
        "UTF8": {},
        "UnfoldSequence": {},
        "UnicodeScalar": {},
        "Unmanaged": {},
        "UnsafeBufferPointer": {},
        "UnsafeBufferPointerIterator": {},
        "UnsafeMutableBufferPointer": {},
        "UnsafeMutablePointer": {},
        "UnsafeMutableRawBufferPointer": {},
        "UnsafeMutableRawBufferPointer.Iterator": {},
        "UnsafeMutableRawPointer": {},
        "UnsafePointer": {},
        "UnsafeRawBufferPointer": {},
        "UnsafeRawBufferPointer.Iterator": {},
        "UnsafeRawPointer": {},
        "Zip2Iterator": {},
        "Zip2Sequence": {},
    }
}%
% for type in sorted(types.keys()):
%{
    attributes = types[type]
    preif_condition = ""
}%

%{
    if "supported" in attributes:
        if preif_condition:
            preif_condition += " && "
        preif_condition += "("
        if "os" in attributes["supported"]:
            for os in attributes["supported"]["os"]:
                preif_condition += "os(%s) || " % os
        if "arch" in attributes["supported"]:
            for arch in attributes["supported"]["arch"]:
                preif_condition += "arch(%s) || " % arch
        if "swift" in attributes["supported"]:
            for swift in attributes["supported"]["swift"]:
                preif_condition += "swift(%s) || " % swift
        if len(preif_condition) == 1:
            preif_condition = ""
        else:
            preif_condition = preif_condition[:-4] + ")"
    if "unsupported" in attributes:
        if preif_condition:
            preif_condition += " && "
        preif_condition += "!("
        if "os" in attributes["unsupported"]:
            for os in attributes["unsupported"]["os"]:
                preif_condition += "os(%s) || " % os
        if "arch" in attributes["unsupported"]:
            for arch in attributes["unsupported"]["arch"]:
                preif_condition += "arch(%s) || " % arch
        if "swift" in attributes["unsupported"]:
            for swift in attributes["unsupported"]["swift"]:
                preif_condition += "swift(%s) || " % swift
        if len(preif_condition) == 1:
            preif_condition = ""
        else:
            preif_condition = preif_condition[:-4] + ")"
    if preif_condition.startswith("(") and ") && !(" not in preif_condition:
        preif_condition = preif_condition[1:-1]
}%
% if preif_condition:
#if ${preif_condition}
% end  # if
% if "available" in attributes:
@available(${attributes["available"]})
% end  # if
extension ${type} {

    public init?(_ a: AAA) {
        guard let o = a[] as? ${type} else {
            return nil
        }
        self = o
    }
}
% if preif_condition:
#endif
% end  # if
% end  # for
